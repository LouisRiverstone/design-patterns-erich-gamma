// ANTES: Sem o padr√£o Decorator
// Extens√£o por heran√ßa leva √† explos√£o de classes

// Sistema de notifica√ß√µes sem Decorator
class BasicNotification {
	protected message: string;

	constructor(message: string) {
		this.message = message;
	}

	send(): string {
		return ` ${this.message}`;
	}
}

// Extens√µes por heran√ßa - PROBLEM√ÅTICO!
class EmailWithSMSNotification extends BasicNotification {
	send(): string {
		return ` ${super.send()}\n SMS: ${this.message}`;
	}
}

class EmailWithSlackNotification extends BasicNotification {
	send(): string {
		return ` ${super.send()}\n Slack: ${this.message}`;
	}
}

class EmailWithSMSAndSlackNotification extends BasicNotification {
	send(): string {
		return ` ${super.send()}\n SMS: ${this.message}\n Slack: ${this.message}`;
	}
}

// E se quisermos mais combina√ß√µes? Discord, Teams, WhatsApp?
// Precisar√≠amos de 2^n classes para n tipos de notifica√ß√£o!

export function demonstrateProblems() {
	console.log("üö® ANTES (Problem√°tico): Sem padr√£o Decorator");
	console.log("");

	// Cada combina√ß√£o precisa de uma classe espec√≠fica
	const basic = new BasicNotification("Nova mensagem!");
	const emailSms = new EmailWithSMSNotification("Nova mensagem!");
	const emailSlack = new EmailWithSlackNotification("Nova mensagem!");
	const all = new EmailWithSMSAndSlackNotification("Nova mensagem!");

	console.log("B√°sica:", basic.send());
	console.log("Email + SMS:", emailSms.send());
	console.log("Email + Slack:", emailSlack.send());
	console.log("Todas:", all.send());

	console.log("");
	console.log("Problemas:");
	console.log("- Explos√£o de classes (2^n combina√ß√µes)");
	console.log("- C√≥digo duplicado");
	console.log("- Dif√≠cil manuten√ß√£o");
	console.log("- Viola√ß√£o do princ√≠pio DRY");
	console.log("- N√£o flex√≠vel em runtime");
}
